[{"/Users/chaoting/Desktop/weather_box/src/index.js":"1","/Users/chaoting/Desktop/weather_box/src/App.js":"2","/Users/chaoting/Desktop/weather_box/src/reportWebVitals.js":"3","/Users/chaoting/Desktop/weather_box/src/components/WeatherIcon.js":"4","/Users/chaoting/Desktop/weather_box/src/utils/helpers.js":"5","/Users/chaoting/Desktop/weather_box/src/views/WeatherSetting.js":"6","/Users/chaoting/Desktop/weather_box/src/views/WeatherCard.js":"7","/Users/chaoting/Desktop/weather_box/src/hooks/useWeatherAPI.js":"8","/Users/chaoting/Desktop/weather_box/src/serviceWorkerRegistration.js":"9"},{"size":843,"mtime":1606887036853,"results":"10","hashOfConfig":"11"},{"size":3506,"mtime":1606879934424,"results":"12","hashOfConfig":"11"},{"size":364,"mtime":1606882257872,"results":"13","hashOfConfig":"11"},{"size":2912,"mtime":1606881766757,"results":"14","hashOfConfig":"11"},{"size":3847,"mtime":1606882289771,"results":"15","hashOfConfig":"11"},{"size":3193,"mtime":1606879819269,"results":"16","hashOfConfig":"11"},{"size":4363,"mtime":1606881879727,"results":"17","hashOfConfig":"11"},{"size":5233,"mtime":1606881884585,"results":"18","hashOfConfig":"11"},{"size":5092,"mtime":1606886807514,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8z353v",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chaoting/Desktop/weather_box/src/index.js",[],"/Users/chaoting/Desktop/weather_box/src/App.js",["41"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { getMoment, findLocation } from './utils/helpers';\nimport useWeatherAPI from './hooks/useWeatherAPI';\n\n// import { ThemeProvider } from 'emotion-theming';書裡引入方法不能用了\nimport { ThemeProvider } from '@emotion/react';\nimport WeatherCard from './views/WeatherCard';\nimport WeatherSetting from './views/WeatherSetting';\nimport styled from '@emotion/styled';\n\n//定義主題配色\nconst theme = {\n  light: {\n    backgroundColor: '#ededed',\n    foregroundColor: '#f9f9f9',\n    boxShadow: '0 1px 3px 0 #999999',\n    titleColor: '#212121',\n    temperatureColor: '#757575',\n    textColor: '#828282',\n  },\n\n  dark: {\n    backgroundColor: '#1F2022',\n    foregroundColor: '#121416',\n    boxShadow:\n      '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\n    titleColor: '#f9f9fa',\n    temperatureColor: '#dddddd',\n    textColor: '#cccccc',\n  },\n};\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst AUTHORIZATION_KEY = 'CWB-6F49758A-41B0-438C-B457-08D2C69B013A';\n// const LOCATION_NAME ='臺北';\n// const LOCATION_NAME_FORECAST ='臺北市';\n\nconst App = () => {\n  // const [currentTheme, setCurrentTheme] = useState('light');\n  const [currentTheme, setCurrentTheme] = useState('light');\n  const [currentPage, setCurrentPage] = useState('WeatherCard');\n  const storageCity = localStorage.getItem('cityName') || '臺北市';\n  const [currentCity, setCurrentCity] = useState(storageCity);\n  // const [ currentCity , setCurrentCity ] = useState(cityName);\n\n  const handleCurrentPageChange = (currentPage) => {\n    setCurrentPage(currentPage);\n  };\n\n  const handleCurrentCityChange = (currentCity) => {\n    setCurrentCity(currentCity);\n  };\n\n  const currentLocation = useMemo(() => findLocation(currentCity), [\n    currentCity,\n  ]);\n\n  const { cityName, locationName, sunriseCityName } = currentLocation;\n\n  //透過currentLocation，可取得cityName, locationName，故可移除常數\n  const [weatherElement, fetchData] = useWeatherAPI({\n    locationName,\n    cityName,\n    authorizationKey: AUTHORIZATION_KEY,\n  });\n\n  //判斷日夜( getMoment，傳入城市，回傳day or night)\n  // 錯誤示範：const moment = useMemo(()=>{ getMoment(LOCATION_NAME_FORECAST); },[]) //抓了半天的臭蟲\n  const moment = useMemo(() => getMoment(sunriseCityName), [sunriseCityName]);\n\n  //依日夜變更主題\n  useEffect(() => {\n    setCurrentTheme(moment === 'day' ? 'light' : 'dark');\n  }, []);\n\n  // const [ weatherElement, fetchData ] = useWeatherAPI()\n  return (\n    // <ThemeProvider theme={theme.dark}>//寫死的版本\n    // <ThemeProvider theme={theme.currentTheme}>//不能寫成這樣會爛掉\n    <ThemeProvider theme={theme[currentTheme]}>\n      <Container>\n        {currentPage === 'WeatherCard' && (\n          <WeatherCard\n            weatherElement={weatherElement}\n            moment={moment}\n            fetchData={fetchData}\n            handleCurrentPageChange={handleCurrentPageChange}\n            cityName={cityName}\n          />\n        )}\n        {currentPage === 'WeatherSetting' && (\n          <WeatherSetting\n            cityName={cityName}\n            handleCurrentCityChange={handleCurrentCityChange}\n            handleCurrentPageChange={handleCurrentPageChange}\n          />\n        )}\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n",["42","43"],"/Users/chaoting/Desktop/weather_box/src/reportWebVitals.js",[],"/Users/chaoting/Desktop/weather_box/src/components/WeatherIcon.js",[],"/Users/chaoting/Desktop/weather_box/src/utils/helpers.js",[],"/Users/chaoting/Desktop/weather_box/src/views/WeatherSetting.js",[],"/Users/chaoting/Desktop/weather_box/src/views/WeatherCard.js",["44"],"import React from 'react';\nimport styled from '@emotion/styled';\nimport dayjs from 'dayjs';\nimport WeatherIcon from './../components/WeatherIcon.js';\n\n//樣板 import { ReactComponent as DayCloudyIcon } from './images/day-cloudy.svg';\nimport { ReactComponent as AirFlowIcon } from './../images/airFlow.svg';\nimport { ReactComponent as RainIcon } from './../images/rain.svg';\nimport { ReactComponent as RefreshIcon } from './../images/refresh.svg';\nimport { ReactComponent as LoadingIcon } from './../images/loading.svg';\nimport { ReactComponent as CogIcon } from './../images/cog.svg';\n\nconst WeatherCardWrapper = styled.div`\n  position: relative;\n  min-width: 360px;\n  box-shadow: ${({ theme }) => theme.boxShadow};\n  background-color: ${({ theme }) => theme.foregroundColor};\n  box-sizing: border-box;\n  padding: 30px 15px;\n`;\n\n// 透過 props 取得傳進來的資料\n// props 會是 {theme: \"dark\", children: \"台北市\"}\nconst Location = styled.div`\n  font-size: 28px;\n  ${'' /* ${props => console.log(props)} */}\n  ${'' /* color: ${props => props.theme === 'dark' ? '#dadada' : '#212121'}; */}\n  color: ${({ theme }) => theme.titleColor};\n  margin-bottom: 20px;\n`;\n\nconst Description = styled.div`\n  font-size: 16px;\n  color: ${({ theme }) => theme.textColor};\n  margin-bottom: 30px;\n`;\n\nconst CurrentWeather = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n`;\n\nconst Temperature = styled.div`\n  color: ${({ theme }) => theme.temperatureColor};\n  font-size: 96px;\n  font-weight: 300;\n  display: flex;\n`;\n\nconst Celsius = styled.div`\n  font-weight: normal;\n  font-size: 42px;\n`;\n\nconst AirFlow = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16x;\n  font-weight: 300;\n  color: ${({ theme }) => theme.textColor};\n  margin-bottom: 20px;\n  svg {\n    width: 25px;\n    height: auto;\n    margin-right: 30px;\n  }\n`;\n\nconst Rain = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16x;\n  font-weight: 300;\n  color: ${({ theme }) => theme.textColor};\n  svg {\n    width: 25px;\n    height: auto;\n    margin-right: 30px;\n  }\n`;\n\nconst Cog = styled(CogIcon)`\n  position: absolute;\n  top: 30px;\n  right: 15px;\n  width: 15px;\n  height: 15px;\n  cursor: pointer;\n`;\n\n//樣板\n// const DayCloudy = styled(DayCloudyIcon)`\n//   flex-basis: 30%;\n// `;\n\n// const Refresh = styled(RefreshIcon)`\n//   /* 在這裡寫入 CSS 樣式 */\n//   width: 15px;\n//   height: 15px;\n//   position: absolute;\n//   right: 15px;\n//   bottom: 15px;\n//   cursor: pointer;\n// `;\n\nconst Refresh = styled.div`\n  position: absolute;\n  right: 15px;\n  bottom: 15px;\n  font-size: 12px;\n  display: inline-flex;\n  align-items: flex-end;\n  color: ${({ theme }) => theme.textColor};\n  svg {\n    margin-left: 10px;\n    width: 15px;\n    height: 15px;\n    cursor: pointer;\n    animation: rotate infinite 1.5s linear;\n    animation-duration: ${({ isLoading }) => (isLoading ? '1.5s' : '0s')};\n  }\n  @keyframes rotate {\n    from {\n      transform: rotate(360deg);\n    }\n    to {\n      transform: rotate(0deg);\n    }\n  }\n`;\n\nconst WeatherCard = (props) => {\n  const {\n    weatherElement,\n    moment,\n    fetchData,\n    handleCurrentPageChange,\n    cityName,\n  } = props;\n\n  const {\n    observationTime,\n    locationName,\n    temperature,\n    windSpeed,\n    description,\n    weatherCode,\n    rainPossibility,\n    comfortability,\n    isLoading,\n  } = weatherElement;\n\n  return (\n    <WeatherCardWrapper>\n      <Cog onClick={() => handleCurrentPageChange('WeatherSetting')} />\n      <Location>{cityName}</Location>\n      <Description>\n        {description} {comfortability}\n      </Description>\n      <CurrentWeather>\n        <Temperature>\n          {Math.round(temperature)} <Celsius>°C</Celsius>\n        </Temperature>\n        <WeatherIcon weatherCode={weatherCode} moment={moment} />\n      </CurrentWeather>\n      <AirFlow>\n        <AirFlowIcon /> {windSpeed} m/h\n      </AirFlow>\n      <Rain>\n        <RainIcon /> {rainPossibility}%\n      </Rain>\n      <Refresh onClick={fetchData} isLoading={isLoading}>\n        最後觀測時間：\n        {new Intl.DateTimeFormat('zh-TW', {\n          hour: 'numeric',\n          minute: 'numeric',\n        }).format(dayjs(observationTime))}{' '}\n        {isLoading ? <LoadingIcon /> : <RefreshIcon />}\n      </Refresh>\n    </WeatherCardWrapper>\n  );\n};\n\nexport default WeatherCard;\n","/Users/chaoting/Desktop/weather_box/src/hooks/useWeatherAPI.js",[],"/Users/chaoting/Desktop/weather_box/src/serviceWorkerRegistration.js",[],{"ruleId":"45","severity":1,"message":"46","line":81,"column":6,"nodeType":"47","endLine":81,"endColumn":8,"suggestions":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":145,"column":5,"nodeType":"55","messageId":"56","endLine":145,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'moment'. Either include it or remove the dependency array.","ArrayExpression",["57"],"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'locationName' is assigned a value but never used.","Identifier","unusedVar",{"desc":"60","fix":"61"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [moment]",{"range":"62","text":"63"},[2477,2479],"[moment]"]